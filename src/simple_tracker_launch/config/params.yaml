usb_cam:
  ros__parameters:
    video_device: "/dev/video0"
    framerate: 30.0
    io_method: "mmap"
    frame_id: "camera"
    pixel_format: "yuyv"
    color_format: "yuv422p"
    image_width: 1920
    image_height: 1080
    camera_name: "test_camera"
    camera_info_url: "package://simple_tracker_launch/config/camera_info.yaml"

camera_simulator:
  ros__parameters:
    image_topic: "/camera/image"
    camera_name: "test_camera"

configuration_service:
  ros__parameters:

    # Options
    #  video = video playback
    #  camera = camera stream
    controller_type: "video"

    # The Camera section
    #    This will eventually be replaced by a feed from the all sky cam, its just here at the moment as a mock
    #camera_mode: "local"
    camera_mode: "rtsp"
    camera_uri: "rtsp://sky360:Sky360Sky!@192.168.0.43:554/cam/realmonitor?channel=1&subtype=2"
    #camera_video_file: "plane_flying_past2.mkv"
    #camera_video_file: "Test_Trimmed.mp4"
    #camera_video_file: "birds_and_plane.mp4"
    camera_video_file: "brad_drone_1.mp4"
    #camera_video_file: "brad_drone_2.mp4"
    #camera_video_file: "uap_texas_skyhub.mp4"
    camera_video_loop: True

    # Frame provider section
    frame_provider_resize_frame: True
    frame_provider_resize_dimension_h: 1040
    frame_provider_resize_dimension_w: 1040
    frame_provider_blur: True
    frame_provider_blur_radius: 3
    frame_provider_cuda_enable: False

    # Visualiser section
    visualiser_bbox_line_thickness: 1 # the line thickness of the bounding box
    visualiser_bbox_size: 64 # fix the size of the bounding box
    visualiser_log_status_to_console: False # log the status message to the console as well
    visualiser_frame_source: "masked"
    visualiser_resize_frame: True
    visualiser_resize_dimension_h: 960
    visualiser_resize_dimension_w: 960
    visualiser_show_cropped_tracks: True
    visualiser_cropped_zoom_factor: 2

    # Tracker Type
    #   currently only CSRT is supported
    tracker_type: "CSRT"
    tracker_stopwatch_enable: False
    tracker_active_only: True
    tracker_detection_mode: "background_subtraction"
    tracker_detection_sensitivity: 1
    tracker_max_active_trackers: 10
    tracker_min_centre_point_distance_between_bboxes: 64 # we could make this 1/15 of the width

    # Background Subtractor Type
    #   one of: 'KNN', 'MOG', MOG2, 'BGS_FD', 'BGS_SFD', 'BGS_WMM', 'BGS_WMV', 'BGS_ABL', 'BGS_ASBL', 'BGS_MOG2',
    #           'BGS_PBAS', 'BGS_SD', 'BGS_SuBSENSE', 'BGS_LOBSTER', 'BGS_PAWCS', 'BGS_TP', 'BGS_VB', 'BGS_CB'
    #           'SKY_WMV', 'SKY_VIBE'
    #   If CUDA is enabled then one if: 'MOG_CUDA', 'MOG2_CUDA'
    background_subtractor_type: "SKY_WMV"
    background_subtractor_sensitivity: 2
    background_subtractor_learning_rate: 0.05
    background_subtractor_cuda_enable: False

    # Blob Detector Type
    #   one of: 'simple', 'sky360'
    blob_detector_type: "sky360"
    blob_detector_min_distance_between_blobs: 64

    # Track section
    track_path_plotting_enabled: True # plot the line of the tracked object
    track_plotting_type: "line"
    track_validation_enable: True
    track_stationary_threshold: 5
    track_orphaned_threshold: 20
    track_prediction_enabled: True

    # Mask types supported
    #   one of: 'no_op', 'fish_eye', 'overlay', 'overlay_inverse'
    #   each option has it's own parameters, see below
    #   NOTE: 'fish_eye' does not support cuda and will fallback to no_op    
    #mask_type: "no_op"
    mask_type: "overlay_inverse"
    mask_pct: 20
    # A couple of built in options already available
    #    "mask-shrubs-inverse-overlay.jpg"
    #    "mikes-camera-mask-overlay.jpg"
    mask_overlay_image_file_name: "mask-shrubs-inverse-overlay.jpg"
    astro_mask_enable: False
    
    dense_optical_flow_h: 400
    dense_optical_flow_w: 480
    dense_optical_cuda_enable: False

    observer_timer_interval: 30
    observer_day_night_brightness_threshold: 95
    
    # The name of the classification model file
    #
    classification_model: "cnn-mlp-05.keras"